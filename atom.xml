<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>寒夏汢</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hanxiatu.com/"/>
  <updated>2019-07-01T15:09:34.702Z</updated>
  <id>https://hanxiatu.com/</id>
  
  <author>
    <name>寒夏汢</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>做一个有趣的人</title>
    <link href="https://hanxiatu.com/post/20190701_essay.html"/>
    <id>https://hanxiatu.com/post/20190701_essay.html</id>
    <published>2019-06-30T16:00:00.000Z</published>
    <updated>2019-07-01T15:09:34.702Z</updated>
    
    <content type="html"><![CDATA[<p>在这里不是想讨论如何做一个有趣的人的方法论，就是谈谈近期的一些感悟。</p><p>文章的标题还可以是<code>做一个优秀的人</code>、<code>做一个有魅力的人</code>……诸如此类。为什么要选择有趣呢？大概是<code>有趣</code>这个词即可以让自己鼓噪起来，又显得气氛轻松。</p><p>为什么想到想到这个话题呢？</p><p>当你的身边有一些优秀的人的时候，是一件多么有趣的事！我是幸运的，在去年的7月，陆续和一些优秀的人聚到了一个团队中。有两个特别有趣的小伙伴我想在这里介绍一下（也是我做出本文思考的来源）：</p><h2 id="geek"><a href="#geek" class="headerlink" title="geek"></a>geek</h2><p>有一个非常geek的小伙伴：年轻、有激情。最近他在玩博客（而我开始写个人博客，也是受其影响）。相比于我还是毛毛雨，他已经玩出了各种花样：</p><ul><li>自定义的主题 –&gt; 极致的加载速度<br><a href="https://github.com/geektutu/hexo-theme-geektutu" target="_blank" rel="noopener">https://github.com/geektutu/hexo-theme-geektutu</a></li><li>独立的思考：看到问题，提出思考，给出解决<br><a href="https://geektutu.com/post/blog-experience-1.html" target="_blank" rel="noopener">https://geektutu.com/post/blog-experience-1.html</a> 系列</li><li>有深度的专题《TensorFlow入门》<br><a href="https://geektutu.com/post/tensorflow-mnist-simplest.html" target="_blank" rel="noopener">https://geektutu.com/post/tensorflow-mnist-simplest.html</a> 系列<br><img src="20190701_essay/tensorflow2.0-dj.png" alt="TensorFlow入门"></li></ul><p>在这些背后他其实付出了很多的观察，思考和努力。有时候会‘爆肝’赶文章，每一篇技术文章都是精心制作，而一些感悟的文章又是非常独具思考。</p><h2 id="文艺"><a href="#文艺" class="headerlink" title="文艺"></a>文艺</h2><p>另外一个小伙伴则是一个非常文艺的诗人（今天才知道他写诗，就这么叫吧）。本来只知道他读书很多，理智、细腻、有文艺范儿。</p><p>今天有幸拜读了他的博客 <a href="http://hutusi.com/" target="_blank" rel="noopener">http://hutusi.com/</a> ，很多篇文章我都蛮喜欢的。</p><ul><li><a href="http://hutusi.com/blog/2015/06/21/paternity" target="_blank" rel="noopener">陪产记</a> 写的很细腻，很多描写犹如在眼前，我最先读的一篇文章。</li><li><a href="http://hutusi.com/blog/2010/08/22/shakespeare" target="_blank" rel="noopener">四月莎士比亚</a> 标题很诗意，每篇的点评也很有趣。很羡慕可以静心读书的人。</li><li><a href="http://hutusi.com/blog/2007/04/11/wangxiaobo" target="_blank" rel="noopener">一只特立独行的猪</a> 哈哈，这篇颇有王小波的幽默感。<br><em>同样王小波也不会喜欢众多无聊的人对自己的裸体指指点点吧。他可能会这么幽默的跟塑像作者说：你丫也没见过我啥模样，这尺寸标准么？这样多少有些轻薄，我更愿意他这么说：你总不能让我一年四季都光着身子吧。</em><br><em>这中间有你的亲人，有你的粉丝，还有一大群不着边际吃饱了饭寻求刺激的人，他们说：小波的裸体我不乐意看，要看就看大波。</em></li><li><a href="http://hutusi.com/blog/2007/03/04/dream" target="_blank" rel="noopener">爱美丽、黑暗王子和豌豆公主</a> 奇怪的梦，有趣的连接，美丽的兴趣</li><li><a href="http://hutusi.com/blog/2007/02/27/yantai" target="_blank" rel="noopener">诗歌与烟台</a> </li><li>……</li></ul><p>哦，对了。他的博客很久没有更新，他自己也打算重新拎起来，作为follower，可以去催更了。</p><h2 id="一点思考"><a href="#一点思考" class="headerlink" title="一点思考"></a>一点思考</h2><p>看到别人有趣而精彩的人生，不免有些羡慕。我看到的是无论geek和文艺，这背后都有他们长期以往的坚持以及为此付出的时间。</p><p>而我的时间哪里去了呢？</p><p>回想过往，我的时间在这里</p><ul><li>学习和工作</li><li>足球</li><li>微博 + 其他信息流</li><li>一些漫无目的的事</li></ul><p>学习和工作不在这里讨论。足球上花的时间总是值得的。</p><p>微博应该减少，作为获取足球信息和一些基本新闻的渠道可以，但是不要总是去反复刷。</p><p>其实过往一些零碎的时间利用的不是很好，很多都淹没在一些无意思的信息流产品上，今后多花点时间写博客，多读书。</p><p>就像文艺的诗人所说，读书可以给自己提供<code>素材</code>，只要多读，这些东西就会印在脑海里，写作可以锻炼思维，触发思考。</p><p>不知道是不是这样就会成为一个有趣的人，也许，跑题了。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>为什么写这篇博文，一是有了点小感悟。觉得写下来也无妨，而是在朋友的影响下，确实想好好写一些博客，一方面对自己的学习和感悟做记录，另一方面也许可以对互联网世界贡献一些自己的知识。</p><p>可以写下来，发现博客真的很，尤其以技术博文为主的话。第一篇技术博客文章+工程花费了一个多星期。后面的博文迟迟也没有想好写什么，没有那位geek小伙伴的极大的热情，也没有他肚子里装满的干货。但不管怎样，先写一篇感悟‘滥竽充数’，后面的文章要加油了！！！</p>]]></content>
    
    <summary type="html">
    
      思考
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MeshView</title>
    <link href="https://hanxiatu.com/post/20190619_meshview.html"/>
    <id>https://hanxiatu.com/post/20190619_meshview.html</id>
    <published>2019-06-18T16:00:00.000Z</published>
    <updated>2019-06-22T15:57:38.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x0、必备知识"><a href="#0x0、必备知识" class="headerlink" title="0x0、必备知识"></a>0x0、必备知识</h1><p>  阅读本文之前，读者最好具备一定的OpenGL的开发背景，并了解OpenGL渲染流程。学习资源可以参考：</p><ul><li><a href="https://learnopengl.com/" target="_blank" rel="noopener">Learn OpenGL</a></li><li><a href="http://www.songho.ca/opengl/index.html" target="_blank" rel="noopener">OpenGL - Song Ho Ahn</a></li></ul><h1 id="0x1、背景介绍"><a href="#0x1、背景介绍" class="headerlink" title="0x1、背景介绍"></a>0x1、背景介绍</h1><p>  在项目开发中，经常需要开发一些炫酷的3D效果。在Android系统上，通常来说可以通过系统提供的OpenGL的java接口来实现（如GLES20.java）。android系统并提供了GLSurfaceView等一套框架机制，直接帮助开发者将gl环境准备好，开发者剩下的工作就是建立模型（model）、设计着色算法（shader）。但是GLSurfaceView整套机制相对来说还是比较重型（独立的gl渲染线程），功耗也比较大。然而有这么一些非常简单的3D特效，直接嵌入在用户交互界面里，对功耗的要求尽量要低，这个时候采用GLSrufaceView那套机制并不合适。</p><p>  经过一些调研，发现android原生的接口Canvas.drawBitmapMesh提供的能力可以帮助实现在任意view上的3D效果。本文介绍的内容就是：如果将OpengGL中建模以及渲染流程的知识和接口Canvas.drawBitmapMesh结合起来，并开发一个小的“渲染引擎”，将这种能力基线化。</p><p>  <strong>示例</strong>  </p><p><img src="20190619_meshview/face_guide.gif" alt="face_guide"> <img src="20190619_meshview/num_picker.gif" alt="num_picker"></p><h1 id="0x2、原理介绍"><a href="#0x2、原理介绍" class="headerlink" title="0x2、原理介绍"></a>0x2、原理介绍</h1><h2 id="Mesh原理"><a href="#Mesh原理" class="headerlink" title="Mesh原理"></a>Mesh原理</h2><p><img src="20190619_meshview/mesh_example.png" alt="mesh"></p><h2 id="Canvas-drawBitmapMesh"><a href="#Canvas-drawBitmapMesh" class="headerlink" title="Canvas.drawBitmapMesh"></a>Canvas.drawBitmapMesh</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line"> * Draw the bitmap through the mesh, where mesh vertices are evenly distributed across the</span><br><span class="line"> * bitmap. There are meshWidth+1 vertices across, and meshHeight+1 vertices down. The verts</span><br><span class="line"> * array is accessed in row-major order, so that the first meshWidth+1 vertices are distributed</span><br><span class="line"> * across the top of the bitmap from left to right. A more general version of this method is</span><br><span class="line"> * drawVertices().</span><br><span class="line"> *</span><br><span class="line"> * Prior to API level &#123;@value Build.VERSION_CODES#P&#125; vertOffset and colorOffset were ignored,</span><br><span class="line"> * effectively treating them as zeros. In API level &#123;@value Build.VERSION_CODES#P&#125; and above</span><br><span class="line"> * these parameters will be respected.</span><br><span class="line"> *</span><br><span class="line"> * @param bitmap The bitmap to draw using the mesh</span><br><span class="line"> * @param meshWidth The number of columns in the mesh. Nothing is drawn if this is 0</span><br><span class="line"> * @param meshHeight The number of rows in the mesh. Nothing is drawn if this is 0</span><br><span class="line"> * @param verts Array of x,y pairs, specifying where the mesh should be drawn. There must be at</span><br><span class="line"> *            least (meshWidth+1) * (meshHeight+1) * 2 + vertOffset values in the array</span><br><span class="line"> * @param vertOffset Number of verts elements to skip before drawing</span><br><span class="line"> * @param colors May be null. Specifies a color at each vertex, which is interpolated across the</span><br><span class="line"> *            cell, and whose values are multiplied by the corresponding bitmap colors. If not</span><br><span class="line"> *            null, there must be at least (meshWidth+1) * (meshHeight+1) + colorOffset values</span><br><span class="line"> *            in the array.</span><br><span class="line"> * @param colorOffset Number of color elements to skip before drawing</span><br><span class="line"> * @param paint May be null. The paint used to draw the bitmap</span><br><span class="line"> */</span><br><span class="line">public void drawBitmapMesh(@NonNull Bitmap bitmap, int meshWidth, int meshHeight,</span><br><span class="line">        @NonNull float[] verts, int vertOffset, @Nullable int[] colors, int colorOffset,</span><br><span class="line">        @Nullable Paint paint) &#123;</span><br><span class="line">    super.drawBitmapMesh(bitmap, meshWidth, meshHeight, verts, vertOffset, colors, colorOffset,</span><br><span class="line">            paint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>bitmap</code>：类似于gl中的texture</li><li><code>meshWidth</code>：网格纵切的数目</li><li><code>meshHeight</code>：网格横切的数目</li><li><code>verts</code>：类似于gl中的vertex array</li><li><code>vertOffset</code></li><li><code>colors</code>：可用来模拟mask（未demo测试）</li><li><code>colorOffset</code></li><li><code>paint</code></li></ul><h2 id="OpenGl的建模和渲染过程"><a href="#OpenGl的建模和渲染过程" class="headerlink" title="OpenGl的建模和渲染过程"></a>OpenGl的建模和渲染过程</h2><p>OpenGL中vertex transformation：</p><p><img src="20190619_meshview/vertex_render_process.png" alt="vertex_render_process"></p><p>对应的计算过程：</p><p><img src="20190619_meshview/vertex_render_calculate.png" alt="vertex_render_calculate"></p><p>通常来讲，通过OpenGL开放的接口，实现3D效果（不考虑着色），需要提供：</p><ul><li>local space建模数据：即vertex array in local space</li><li>MVP matrix：Model matrix, View matrix, Project matrix</li><li>视窗：即viewport</li></ul><h1 id="0x3、工程实践简介"><a href="#0x3、工程实践简介" class="headerlink" title="0x3、工程实践简介"></a>0x3、工程实践简介</h1><p><strong>OpenGL流程和MeshiView实践对比</strong></p><ol><li>OpengGL的流程<br><img src="20190619_meshview/gl_render_outline.png" alt="gl_render_outline"><br>可以看到在android的OpenGL开发过程中，数据的处理过程是黑盒的（即Not visible to developer），开发人员只需要传入这个几方面的数据：</li></ol><ul><li>Vertex Model ： Local space 对3D物体建模之后的顶点数据 &amp; modle matrix</li><li>viewport ：通过GLES.glviewport设置</li><li>view matrix: 通过Matrix - GLES20系列接口传递(setLookAtM)</li><li>projection matrix: 通过Matrix - GLES20系列接口传递(orthoM、frustumM、perspectiveM)</li></ul><ol start="2"><li>MeshView实践<br><img src="20190619_meshview/meshview_render_outline.png" alt="meshview_render_outline"><br>因为Mesh并不走传统的android的OpenGL的流程，所以GLES20的接口都不会被使用，所以需要做如下工作</li></ol><ul><li>Vertex Model：同OpenGL</li><li>viewport、setLookAt、ortho、frustum、perspective 等接口</li><li>使用内部私有方法@Method:mesh实现 vertex * MVP（其实在OpenGL中一般实在vertex shader中实现，可以灵活实现，但基本上就是vertex * MVP）</li><li>将准备好的verts传递给Canvas.drawBitmapMesh处理</li></ul><p><strong>模拟接口对比</strong></p><table><thead><tr><th>提供的接口</th><th>对应模拟的android系统接口</th></tr></thead><tbody><tr><td>MeshObject.viewport</td><td>android.opengl.GLES20.glviewport</td></tr><tr><td>MeshObject.ortho</td><td>android.opengl.Matrix.orthoM</td></tr><tr><td>MeshObject.frustum</td><td>android.opengl.Matrix.frustumM</td></tr><tr><td>MeshObject.perspective</td><td>android.opengl.Matrix.perspectiveM</td></tr><tr><td>MeshObject.setLookAt</td><td>android.opengl.Matrix.setLookAtM</td></tr></tbody></table><p><strong>核心计算方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private Vec3 mesh(Vec4 vert, float[] mvpMatrix) &#123;</span><br><span class="line">    float[] from = new float[] &#123;vert.x, vert.y, vert.z, vert.w&#125;;</span><br><span class="line">    float[] to = new float[4];</span><br><span class="line">    Matrix.multiplyMV(to,0, mvpMatrix,0, from,0);</span><br><span class="line"></span><br><span class="line">    Vec4 clip = new Vec4(to[0], to[1], to[2], to[3]);</span><br><span class="line"></span><br><span class="line">    Vec4 ndc = new Vec4(clip.x/clip.w, clip.y/clip.w, clip.z/clip.w, 1.0f);</span><br><span class="line"></span><br><span class="line">    ViewPort viewPort = getViewPort();</span><br><span class="line">    float x = viewPort.x;</span><br><span class="line">    float y = viewPort.y;</span><br><span class="line">    float w = viewPort.w;</span><br><span class="line">    float h = viewPort.h;</span><br><span class="line">    float n = viewPort.n;</span><br><span class="line">    float f = viewPort.f;</span><br><span class="line"></span><br><span class="line">    float wx = w/2 * (ndc.x + 1) + x;</span><br><span class="line">    float wy = h/2 * (ndc.y + 1) + y;</span><br><span class="line">    float wz = (f - n)/2 * ndc.z + (f + n)/2;</span><br><span class="line"></span><br><span class="line">    return new Vec3(wx, wy, wz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><code>注：抱歉，完整的工程因个人原因已从github删除。只保留如上最核心的函数。</code></em></p><h1 id="0x4、遗留问题"><a href="#0x4、遗留问题" class="headerlink" title="0x4、遗留问题"></a>0x4、遗留问题</h1><ul><li><p>目前只是简单的模拟了OpenGL背后的渲染流程，一些高级特性不具备。例如利用深度信息判断点的前后关系并裁剪的能力不具备。这样就要求使用者精确建模，避免出现有不同深度信息的点，否者绘制顺序无法保证最前面的点被后绘制（看到的现象就是物体背后的信息发生了穿透）</p><p>例如下图中，右边的示例底部发生了穿透现象。</p></li></ul><p><img src="20190619_meshview/calendar_3d_ok.png" alt="ok">   <img src="20190619_meshview/calendar_3d_error.png" alt="error"></p><ul><li>目前本篇博客细节介绍的并不详细，待完善</li></ul>]]></content>
    
    <summary type="html">
    
      \[android\] use drawBitmapMesh to get 3D effect
    
    </summary>
    
    
  </entry>
  
</feed>
